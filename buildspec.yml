version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Instalando herramientas necesarias..."
      - apt-get update && apt-get install -y zip
      - echo "El directorio actual es $CODEBUILD_SRC_DIR"
      - echo "Creando deploy en el ambiente $ALIAS_NAME"

  pre_build:
    commands:
      - aws s3 cp s3://kanri-project-files/layer_zip/kanri_layer.zip kanri_layer.zip
      # Intenta descargar el hash actual. Si no existe, se manejará el error.
      - >
       CURRENT_HASH=$(aws s3 cp s3://kanri-project-files/hash_layer/current-hash.txt - 2>/dev/null) || echo "Archivo de hash no encontrado."
      - NEW_HASH=$(sha256sum kanri_layer.zip | awk '{print $1}')
      - |
        if [ -z "$CURRENT_HASH" ] || [ "$CURRENT_HASH" != "$NEW_HASH" ]; then
        echo "El layer de dependencias ha cambiado o es la primera vez que se sube."
        SKIP_LAYER_UPDATE="false"
        # Sube el nuevo hash a S3
        echo $NEW_HASH | aws s3 cp - s3://kanri-project-files/hash_layer/current-hash.txt
        # Aquí podrías añadir el comando para subir dependencies_layer.zip a S3 y actualizar el layer en Lambda
        else
        echo "El layer de dependencias no ha cambiado."
        SKIP_LAYER_UPDATE="true"
        fi

  build:
    commands:
      - echo "build process"

  post_build:
    commands:
      #- |
      #  if [ "$SKIP_LAYER_UPDATE" != "true" ]; then
      #    echo "Actualizando layer de dependencias en Lambda..."
      #    # Asume que ya tienes un layer creado y solo necesitas actualizarlo
      #    aws lambda publish-layer-version --layer-name "nombre-de-tu-layer" --zip-file fileb://dependencies_layer.zip --compatible-runtimes python3.11
      #    # Opcional: Actualiza el hash almacenado en S3
      #    echo $NEW_HASH | aws s3 cp - s3://my-bucket/path/to/current-hash.txt
      #  fi
      - echo "Actualizando función Lambda con el nuevo código..."
      #- aws lambda update-function-code --function-name mi-funcion-lambda --zip-file fileb://function.zip
      - echo "Publicando nueva versión de la función Lambda..."
      #- NEW_VERSION=$(aws lambda publish-version --function-name mi-funcion-lambda --query 'Version' --output text)
      - echo "Actualizando el alias con la nueva versión..."
      #- aws lambda update-alias --function-name mi-funcion-lambda --name ALIAS_NAME --function-version $NEW_VERSION
      # Reemplaza ALIAS_NAME con el alias que deseas actualizar, por ejemplo, "develop" o "production"

artifacts:
  files:
    #- function.zip
    - kanri_layer.zip
